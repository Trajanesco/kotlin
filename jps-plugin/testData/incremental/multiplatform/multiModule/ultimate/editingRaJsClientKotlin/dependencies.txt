//
// DON'T EDIT! This file is GENERATED by `MppJpsIncTestsGenerator` (called in generateTests)
// from `incremental/multiplatform/multiModule/ultimate/dependencies.txt`
//

//
// Let we have this depend module groups:
//
//  RB -> RA
//  A -> RA
//  B -> RB
//  B -> A
//  R -> B (and R -> A, transitively)
//
// RA and RB is regular module groups.
// Each group contains 2 jvm and 2 js regular modules (server and client).
//
// A and B is multiplatform module groups. This cases are covered:
// - one platform module provide actual definitions for two common modules
// - one common module has actual declarations for 2 jvm and 2 js platforms (server and client)
// Therefore each module group itself contains 3 module subgroups: common, jvm and js modules.
// Each of which, in turn, contains common, client and server modules.
//
// R is regular module depends on B (and on A, transitively)
//

//////  RA //////

raJvmClient [jvm, edit]
raJvmServer [jvm]
raJsClient [js, edit]
raJsServer [js]

////// RB //////

rbJvmClient [jvm]
rbJvmClient -> raJvmClient [compile, exported]

rbJvmServer [jvm]
rbJvmServer -> raJvmServer [compile, exported]

rbJsClient [js]
rbJsClient -> raJsClient [compile, exported]

rbJsServer [js]
rbJsServer -> raJsServer [compile, exported]

////// A //////

ac [common, edit, editExpectActual]

acClient [common]
acClient -> ac [compile, exported]

acServer [common]
acServer -> ac [compile, exported]

aJvmClient [jvm, edit, editJvm]
aJvmClient -> ac [expectedBy]
aJvmClient -> acClient [expectedBy]
aJvmClient -> raJvmClient [compile, exported]

aJvmServer [jvm]
aJvmServer -> ac [expectedBy]
aJvmServer -> acServer [expectedBy]
aJvmServer -> raJvmServer [compile, exported]

aJsClient [js, edit]
aJsClient -> ac [expectedBy]
aJsClient -> acClient [expectedBy]
aJsClient -> raJsClient [compile, exported]

aJsServer [js]
aJsServer -> ac [expectedBy]
aJsServer -> acServer [expectedBy]
aJsServer -> raJsServer [compile, exported]

////// B //////

bc [common, editExpectActual]
bc -> ac [compile, exported]

bcClient [common, edit, editJvm]
bcClient -> bc [compile, exported]
bcClient -> acClient [compile, exported]

bcServer [common]
bcServer -> bc [compile, exported]
bcServer -> acServer [compile, exported]

bJvmClient [jvm]
bJvmClient -> bc [expectedBy]
bJvmClient -> bcClient [expectedBy]
bJvmClient -> aJvmClient [compile, exported]
bJvmClient -> rbJvmClient [compile, exported]

bJvmServer [jvm]
bJvmServer -> bc [expectedBy]
bJvmServer -> bcServer [expectedBy]
bJvmServer -> aJvmServer [compile, exported]
bJvmServer -> rbJvmServer [compile, exported]

bJsClient [js]
bJsClient -> bc [expectedBy]
bJsClient -> bcClient [expectedBy]
bJsClient -> aJsClient [compile, exported]
bJsClient -> rbJsClient [compile, exported]

bJsServer [js]
bJsServer -> bc [expectedBy]
bJsServer -> bcServer [expectedBy]
bJsServer -> aJsServer [compile, exported]
bJsServer -> rbJsServer [compile, exported]

////// R //////

rJvmClient [jvm, edit]
rJvmClient -> bJvmClient [compile, exported]

rJvmServer [jvm]
rJvmServer -> bJvmServer [compile, exported]

rJsClient [js, edit]
rJsClient -> bJsClient [compile, exported]

rJsServer [js]
rJsServer -> bJsServer [compile, exported]